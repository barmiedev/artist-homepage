---
import { ViewTransitions } from 'astro:transitions';
import Footer from '@/components/footer.astro';
import LanguageSwitch from '@/components/language-switch.astro';
import Meta from '@/components/meta.astro';
import { getTranslations, locales } from '@/lib/utils/i18n';
import {
  getLocalizedPath,
  getNavigationLinks,
  getSegments,
} from '@/lib/utils/navigation';

const { title } = Astro.props;

const currentPath = Astro.url.pathname;
const { segments, currentLocale } = getSegments(currentPath);

// Generate language switcher paths
const localePaths = await Promise.all(
  locales.map((locale) =>
    getLocalizedPath({
      currentLocale,
      currentPath,
      segments,
      targetLocale: locale,
    }),
  ),
);

const navigation = await getNavigationLinks(currentLocale);
const navigationTranslations = await getTranslations(
  currentLocale,
  'navigation',
);
---

<!doctype html>
<html lang="en" transition:animate="fade">
  <head>
    <Meta pageTitle={title} />
    <ViewTransitions />
    <script>
      // Language detection and redirection
      import { getLanguageCookie, languageCookieName } from "@/config/language";
      import { defaultLocale, isLocale } from "@/lib/utils/i18n";
      import { getLocalizedPath, getSegments } from "@/lib/utils/navigation";

      (async function() {
        // will run once the page is loaded
        if (!document.cookie.includes(languageCookieName)) {
          // Protection for language codes that are not 2 characters long
          const languages = navigator.languages?.filter((lang) => lang.length === 2);

          // Fallback to English if no matching language is found
          const userLang = languages[0] || defaultLocale;

          // Setting the cookie
          document.cookie = getLanguageCookie(userLang);
        }
        // changing location based on cookie
        const languageCookieValue = document.cookie
          .split('; ')
          .find((row) => row.startsWith(languageCookieName))?.split('=')[1] || defaultLocale;

        const language = isLocale(languageCookieValue) ? languageCookieValue : defaultLocale;

        const currentPath = window.location.pathname;
        const { segments, currentLocale } = getSegments(currentPath);

        // get localized path (current one)
        let localePath = await getLocalizedPath({
          currentLocale,
          currentPath,
          segments,
          targetLocale: language,
        });

        // there might be a trailing slash in the URL - unify it (if currentPath has one, add it to localePath)
        if (currentPath.endsWith('/') && !localePath.endsWith('/')) {
          localePath += '/';
        }

        // also, if localePath has a trailing slash, but currentPath doesn't, remove it
        if (localePath.endsWith('/') && !currentPath.endsWith('/')) {
          localePath = localePath.slice(0, -1);
        }

        // redirect user to the correct language (if needed)
        if (localePath !== currentPath) {
          window.location.href = localePath;
        }
      }())
    </script>
	</head>
  <body>
    <nav>
      <div>
        {locales.map((locale, index) => (
          <a
            href={localePaths[index]}
          >
            <LanguageSwitch language={locale} />

          </a>
        ))}
      </div>
      <div>
        {navigation.map((link) => (
          <a href={link.href}>{navigationTranslations[link.title]}</a>
        ))}
      </div>
    </nav>
    <main>
      <slot />
    </main>
    <Footer />
  </body>
</html>